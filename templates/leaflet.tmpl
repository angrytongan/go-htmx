{{block "leaflet" .}}
  {{template "head" .}}
  {{template "nav" .}}

  {{template "leaflet-content" .}}

  {{template "foot" .}}
{{end}}

{{block "leaflet-content" .}}
  <div id="map" class="map"></div>
  <div id="marker-information">Waiting for first marker click</div>

  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
     integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
     crossorigin=""/>
  <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
     integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
     crossorigin=""></script>

  <script>
    const DEBOUNCE_GETMARKERS_TIMEOUT = 500; // ms
    const mapMarkers = new Map();

    const debounce = (mainFunction, delay) => {
      let timer;

      return function (...args) {
        clearTimeout(timer);

        timer = setTimeout(() => {
          mainFunction(...args);
        }, delay);
      };
    };

    const getMarkers = async (bounds) => {
      if (bounds) {
        const url = "/leaflet/markers-in-bbox?bbox=" + bounds.toBBoxString();
        fetch(url)
          .then((response) => response.json())
          .then((markers) => {
            markers.forEach((m) => {
              if (!mapMarkers.has(m.id)) {
                const marker = L.marker([m.latitude, m.longitude]).addTo(map);

                mapMarkers.set(m.id, marker)
                marker.bindPopup('initialised', {
                  maxWidth: 'auto',
                });

                marker.on('click', async (e) => {
                  marker.setPopupContent(`
                    <div hx-get="/leaflet/marker-popup/${m.id}"
                         hx-target="this"
                         hx-trigger="load"
                         hx-swap="outerHTML"
                         hx-select-oob="marker-information">loading...</div>
                  `).openPopup();
                  htmx.process(marker.getPopup().getElement())
                });
              }
          })
        })
      }
    };

    var map = L.map('map');

    const debouncedGetMarkers = debounce(getMarkers, 250)
    const events = ["load", "viewreset", "move", "zoomlevelschange", "zoom", "moveend", "zoomend", "resize"]

    events.forEach((event) => {
      map.on(event, (e) => debouncedGetMarkers(map.getBounds()));
    });

    map.setView([-26.65, 153.06], 10);
    L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
      maxZoom: 19,
      attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
    }).addTo(map)
  </script>

{{end}}

{{block "leaflet-marker-popup" .}}
  {{template "leaflet-marker-info" .}}
  {{template "leaflet-marker-controls" .}}
{{end}}

{{block "leaflet-marker-info" .}}
  <p>This is {{.Marker.Title}}, with some more words that are long</p>
{{end}}

{{block "leaflet-marker-controls" .}}
  <button hx-post="/leaflet/marker-choose"
          hx-vars="id:{{.Marker.ID}}"
          hx-trigger="click"
          hx-target="this"
          hx-swap="outerHTML"
          >{{.Prompt}}</button>
  <div id="marker-information" hx-swap-oob="true">{{.Information}}</div>
{{end}}
